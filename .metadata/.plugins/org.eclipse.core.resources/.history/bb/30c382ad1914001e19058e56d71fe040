package com.programmingtechie.orderservice.service;

import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.reactive.function.client.WebClient;

import com.programmingtechie.orderservice.dto.OrderLineItemsDto;
import com.programmingtechie.orderservice.dto.OrderRequest;
import com.programmingtechie.orderservice.model.Order;
import com.programmingtechie.orderservice.model.OrderLineItems;
import com.programmingtechie.orderservice.repository.OrderRepository;

@Service
@Transactional
public class OrderService {
	
	@Autowired
	private OrderRepository orderRepository;
	
	@Autowired
	private WebClient webClient;
	
	public void placeOrder(OrderRequest orderRequest)
	{
		Order order = new Order();
		
		order.setOrderNumber(UUID.randomUUID().toString());
		Object[] orderLineItems = orderRequest.getOrderLineItemDtoList().stream().map(this::mapToDto).toArray();
		List<Object> asList = Arrays.asList(orderLineItems);
		List<OrderLineItems> mythings = (List<OrderLineItems>) (Object) asList;
		order.setOrderLineItemsList(mythings);
		
		String[] skuCodesArray = (String[]) order.getOrderLineItemsList().stream().map(OrderLineItems::getSkuCode).toArray();
		List<String> skuCodes = Arrays.asList(skuCodesArray);
		
			
		
		//Call Invenotry service  and place order if product is in stock
	   Boolean result = webClient.get().uri("http://localhost:8082/api/inventory",uriBuilder->uriBuilder.queryParam("skuCode", skuCodes).build())
			   .retrieve().bodyToMono(Boolean.class).block();
	   if(result)
	   {
		   orderRepository.save(order);
	   }
	   else
	   {
		   throw new IllegalArgumentException("Product is not in stock, please try again letter");
	   }
		
	}
	
	 private OrderLineItems mapToDto(OrderLineItemsDto orderLineItemsDto) 
	 {
	        OrderLineItems orderLineItems = new OrderLineItems();
	        orderLineItems.setPrice(orderLineItemsDto.getPrice());
	        orderLineItems.setQuantity(orderLineItemsDto.getQuantity());
	        orderLineItems.setSkuCode(orderLineItemsDto.getSkuCode());
	        return orderLineItems;
	    }

}
