package com.programmingtechie;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.math.BigDecimal;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MockMvcBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.testcontainers.containers.OracleContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.programming.techie.productservice.dto.ProductRequest;

@SpringBootTest
@Testcontainers
@AutoConfigureMockMvc
class ProductServiceApplicationTests {
	
	@Container
	static OracleContainer oracleDBContainer = new OracleContainer("gvenzl/oracle-xe:21-slim-faststart")
		    .withDatabaseName("product")
		    .withUsername("product")
		    .withPassword("product");
	
	@Autowired
	private MockMvc mokMVC;
	
	@Autowired
	private ObjectMapper objectMapper;
	
	 @DynamicPropertySource
	static void setProperties(DynamicPropertyRegistry registry)
	{
		registry.add("spring.datasource.url", oracleDBContainer::getJdbcUrl);
        registry.add("spring.datasource.username", oracleDBContainer::getUsername);
        registry.add("spring.datasource.password", oracleDBContainer::getPassword);	
	}
	
	@Test
	void shouldCreateProduct() throws Exception 
	{
		ProductRequest productRequest = getProductRequest();
		String productRequestString = objectMapper.writeValueAsString(productRequest);
		mokMVC.perform(MockMvcRequestBuilders.post("api/product")
				.contentType(MediaType.APPLICATION_JSON)
				.content(productRequestString))
		        .andExpect(status().isCreated());
		
	}
	
	private ProductRequest getProductRequest()
	{
		ProductRequest p = new ProductRequest("iphone 14","Iphone14",BigDecimal.valueOf(14000));
		
		return p;
	}
	

}
